
st7920_test0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007a8  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000400  0080010e  0080010e  0000084a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce0  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ca  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085a  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ee  00000000  00000000  00002b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	08 3e       	cpi	r16, 0xE8	; 232
  6a:	22 22       	and	r2, r18
  6c:	3e 08       	sbc	r3, r14
  6e:	08 7f       	andi	r16, 0xF8	; 248
  70:	22 14       	cp	r2, r2
  72:	08 7f       	andi	r16, 0xF8	; 248
  74:	7f 08       	sbc	r7, r15
  76:	14 22       	and	r1, r20
  78:	7f 08       	sbc	r7, r15
  7a:	7f 7f       	andi	r23, 0xFF	; 255
  7c:	00 00       	nop
  7e:	7f 7f       	andi	r23, 0xFF	; 255
  80:	00 58       	subi	r16, 0x80	; 128
  82:	64 04       	cpc	r6, r4
  84:	64 58       	subi	r22, 0x84	; 132
  86:	00 80       	ld	r0, Z
  88:	7c 40       	sbci	r23, 0x0C	; 12
  8a:	40 3c       	cpi	r20, 0xC0	; 192
  8c:	22 22       	and	r2, r18
  8e:	22 22       	and	r2, r18
  90:	22 3e       	cpi	r18, 0xE2	; 226
  92:	3e 22       	and	r3, r30
  94:	22 22       	and	r2, r18
  96:	22 22       	and	r2, r18
  98:	08 08       	sbc	r0, r8
  9a:	08 08       	sbc	r0, r8
  9c:	08 08       	sbc	r0, r8
  9e:	38 40       	sbci	r19, 0x08	; 8
  a0:	40 30       	cpi	r20, 0x00	; 0
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	40 30       	cpi	r20, 0x00	; 0
  a8:	40 38       	cpi	r20, 0x80	; 128
  aa:	00 80       	ld	r0, Z
  ac:	7e 01       	movw	r14, r28
  ae:	49 36       	cpi	r20, 0x69	; 105
  b0:	00 06       	cpc	r0, r16
  b2:	29 79       	andi	r18, 0x99	; 153
  b4:	29 06       	cpc	r2, r25
  b6:	00 00       	nop
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 60       	ori	r16, 0x00	; 0
  be:	7e 0a       	sbc	r7, r30
  c0:	35 3f       	cpi	r19, 0xF5	; 245
  c2:	00 2a       	or	r0, r16
  c4:	1c 36       	cpi	r17, 0x6C	; 108
  c6:	1c 2a       	or	r1, r28
  c8:	00 e0       	ldi	r16, 0x00	; 0
  ca:	51 4f       	sbci	r21, 0xF1	; 241
  cc:	41 ff       	sbrs	r20, 1
  ce:	00 7f       	andi	r16, 0xF0	; 240
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	40 ff       	sbrs	r20, 0
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	40 7f       	andi	r20, 0xF0	; 240
  d8:	40 ff       	sbrs	r20, 0
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	54 4c       	sbci	r21, 0xC4	; 196
  de:	44 fc       	sbrc	r4, 4
  e0:	00 18       	sub	r0, r0
  e2:	24 7e       	andi	r18, 0xE4	; 228
  e4:	24 18       	sub	r2, r4
  e6:	00 7c       	andi	r16, 0xC0	; 192
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	40 fc       	sbrc	r4, 0
  ec:	00 7c       	andi	r16, 0xC0	; 192
  ee:	40 7c       	andi	r20, 0xC0	; 192
  f0:	40 fc       	sbrc	r4, 0
  f2:	00 14       	cp	r0, r0
  f4:	b6 ff       	sbrs	r27, 6
  f6:	b6 14       	cp	r11, r6
  f8:	00 04       	cpc	r0, r0
  fa:	06 7f       	andi	r16, 0xF6	; 246
  fc:	06 04       	cpc	r0, r6
  fe:	00 10       	cpse	r0, r0
 100:	30 7f       	andi	r19, 0xF0	; 240
 102:	30 10       	cpse	r3, r0
 104:	00 08       	sbc	r0, r0
 106:	08 3e       	cpi	r16, 0xE8	; 232
 108:	1c 08       	sbc	r1, r12
 10a:	00 08       	sbc	r0, r0
 10c:	1c 3e       	cpi	r17, 0xEC	; 236
 10e:	08 08       	sbc	r0, r8
 110:	00 78       	andi	r16, 0x80	; 128
 112:	40 40       	sbci	r20, 0x00	; 0
 114:	40 40       	sbci	r20, 0x00	; 0
 116:	00 08       	sbc	r0, r0
 118:	3e 08       	sbc	r3, r14
 11a:	3e 08       	sbc	r3, r14
 11c:	00 30       	cpi	r16, 0x00	; 0
 11e:	3c 3f       	cpi	r19, 0xFC	; 252
 120:	3c 30       	cpi	r19, 0x0C	; 12
 122:	00 03       	mulsu	r16, r16
 124:	0f 3f       	cpi	r16, 0xFF	; 255
 126:	0f 03       	fmul	r16, r23
	...
 130:	00 5e       	subi	r16, 0xE0	; 224
 132:	00 00       	nop
 134:	00 00       	nop
 136:	06 00       	.word	0x0006	; ????
 138:	06 00       	.word	0x0006	; ????
 13a:	00 28       	or	r0, r0
 13c:	7c 28       	or	r7, r12
 13e:	7c 28       	or	r7, r12
 140:	00 48       	sbci	r16, 0x80	; 128
 142:	54 d6       	rcall	.+3240   	; 0xdec <__stack+0x4ed>
 144:	54 24       	eor	r5, r4
 146:	00 42       	sbci	r16, 0x20	; 32
 148:	20 18       	sub	r2, r0
 14a:	04 42       	sbci	r16, 0x24	; 36
 14c:	00 34       	cpi	r16, 0x40	; 64
 14e:	4a 5a       	subi	r20, 0xAA	; 170
 150:	24 50       	subi	r18, 0x04	; 4
 152:	00 00       	nop
 154:	0a 06       	cpc	r0, r26
 156:	00 00       	nop
 158:	00 00       	nop
 15a:	18 24       	eor	r1, r8
 15c:	42 00       	.word	0x0042	; ????
 15e:	00 00       	nop
 160:	42 24       	eor	r4, r2
 162:	18 00       	.word	0x0018	; ????
 164:	00 14       	cp	r0, r0
 166:	08 3e       	cpi	r16, 0xE8	; 232
 168:	08 14       	cp	r0, r8
 16a:	00 10       	cpse	r0, r0
 16c:	38 10       	cpse	r3, r8
 16e:	00 00       	nop
 170:	00 00       	nop
 172:	a0 60       	ori	r26, 0x00	; 0
 174:	00 00       	nop
 176:	00 10       	cpse	r0, r0
 178:	10 10       	cpse	r1, r0
 17a:	10 00       	.word	0x0010	; ????
 17c:	00 00       	nop
 17e:	00 40       	sbci	r16, 0x00	; 0
 180:	00 00       	nop
 182:	00 00       	nop
 184:	60 18       	sub	r6, r0
 186:	06 00       	.word	0x0006	; ????
 188:	00 3c       	cpi	r16, 0xC0	; 192
 18a:	46 4a       	sbci	r20, 0xA6	; 166
 18c:	52 3c       	cpi	r21, 0xC2	; 194
 18e:	00 00       	nop
 190:	44 7e       	andi	r20, 0xE4	; 228
 192:	40 00       	.word	0x0040	; ????
 194:	00 64       	ori	r16, 0x40	; 64
 196:	52 52       	subi	r21, 0x22	; 34
 198:	52 4c       	sbci	r21, 0xC2	; 194
 19a:	00 24       	eor	r0, r0
 19c:	42 4a       	sbci	r20, 0xA2	; 162
 19e:	4a 34       	cpi	r20, 0x4A	; 74
 1a0:	00 18       	sub	r0, r0
 1a2:	14 52       	subi	r17, 0x24	; 36
 1a4:	7e 50       	subi	r23, 0x0E	; 14
 1a6:	00 2e       	mov	r0, r16
 1a8:	4a 4a       	sbci	r20, 0xAA	; 170
 1aa:	4a 32       	cpi	r20, 0x2A	; 42
 1ac:	00 3c       	cpi	r16, 0xC0	; 192
 1ae:	4a 4a       	sbci	r20, 0xAA	; 170
 1b0:	4a 32       	cpi	r20, 0x2A	; 42
 1b2:	00 02       	muls	r16, r16
 1b4:	02 62       	ori	r16, 0x22	; 34
 1b6:	12 0e       	add	r1, r18
 1b8:	00 34       	cpi	r16, 0x40	; 64
 1ba:	4a 4a       	sbci	r20, 0xAA	; 170
 1bc:	4a 34       	cpi	r20, 0x4A	; 74
 1be:	00 4c       	sbci	r16, 0xC0	; 192
 1c0:	52 52       	subi	r21, 0x22	; 34
 1c2:	52 3c       	cpi	r21, 0xC2	; 194
 1c4:	00 00       	nop
 1c6:	00 24       	eor	r0, r0
 1c8:	00 00       	nop
 1ca:	00 00       	nop
 1cc:	40 24       	eor	r4, r0
 1ce:	00 00       	nop
 1d0:	00 10       	cpse	r0, r0
 1d2:	28 44       	sbci	r18, 0x48	; 72
 1d4:	00 00       	nop
 1d6:	00 00       	nop
 1d8:	28 28       	or	r2, r8
 1da:	28 00       	.word	0x0028	; ????
 1dc:	00 00       	nop
 1de:	44 28       	or	r4, r4
 1e0:	10 00       	.word	0x0010	; ????
 1e2:	00 04       	cpc	r0, r0
 1e4:	02 52       	subi	r16, 0x22	; 34
 1e6:	0c 00       	.word	0x000c	; ????
 1e8:	00 7c       	andi	r16, 0xC0	; 192
 1ea:	82 ba       	out	0x12, r8	; 18
 1ec:	a6 5c       	subi	r26, 0xC6	; 198
 1ee:	00 7c       	andi	r16, 0xC0	; 192
 1f0:	12 12       	cpse	r1, r18
 1f2:	12 7c       	andi	r17, 0xC2	; 194
 1f4:	00 7e       	andi	r16, 0xE0	; 224
 1f6:	4a 4a       	sbci	r20, 0xAA	; 170
 1f8:	4a 3c       	cpi	r20, 0xCA	; 202
 1fa:	00 3c       	cpi	r16, 0xC0	; 192
 1fc:	42 42       	sbci	r20, 0x22	; 34
 1fe:	42 24       	eor	r4, r2
 200:	00 7e       	andi	r16, 0xE0	; 224
 202:	42 42       	sbci	r20, 0x22	; 34
 204:	42 3c       	cpi	r20, 0xC2	; 194
 206:	00 7e       	andi	r16, 0xE0	; 224
 208:	4a 4a       	sbci	r20, 0xAA	; 170
 20a:	4a 42       	sbci	r20, 0x2A	; 42
 20c:	00 7e       	andi	r16, 0xE0	; 224
 20e:	0a 0a       	sbc	r0, r26
 210:	0a 02       	muls	r16, r26
 212:	00 3c       	cpi	r16, 0xC0	; 192
 214:	42 4a       	sbci	r20, 0xA2	; 162
 216:	4a 3a       	cpi	r20, 0xAA	; 170
 218:	00 7e       	andi	r16, 0xE0	; 224
 21a:	08 08       	sbc	r0, r8
 21c:	08 7e       	andi	r16, 0xE8	; 232
 21e:	00 00       	nop
 220:	42 7e       	andi	r20, 0xE2	; 226
 222:	42 00       	.word	0x0042	; ????
 224:	00 22       	and	r0, r16
 226:	42 42       	sbci	r20, 0x22	; 34
 228:	42 3e       	cpi	r20, 0xE2	; 226
 22a:	00 7e       	andi	r16, 0xE0	; 224
 22c:	08 18       	sub	r0, r8
 22e:	24 42       	sbci	r18, 0x24	; 36
 230:	00 7e       	andi	r16, 0xE0	; 224
 232:	40 40       	sbci	r20, 0x00	; 0
 234:	40 40       	sbci	r20, 0x00	; 0
 236:	00 7e       	andi	r16, 0xE0	; 224
 238:	04 08       	sbc	r0, r4
 23a:	04 7e       	andi	r16, 0xE4	; 228
 23c:	00 7e       	andi	r16, 0xE0	; 224
 23e:	04 08       	sbc	r0, r4
 240:	10 7e       	andi	r17, 0xE0	; 224
 242:	00 3c       	cpi	r16, 0xC0	; 192
 244:	42 42       	sbci	r20, 0x22	; 34
 246:	42 3c       	cpi	r20, 0xC2	; 194
 248:	00 7e       	andi	r16, 0xE0	; 224
 24a:	12 12       	cpse	r1, r18
 24c:	12 0c       	add	r1, r2
 24e:	00 3c       	cpi	r16, 0xC0	; 192
 250:	42 52       	subi	r20, 0x22	; 34
 252:	22 5c       	subi	r18, 0xC2	; 194
 254:	00 7e       	andi	r16, 0xE0	; 224
 256:	12 12       	cpse	r1, r18
 258:	32 4c       	sbci	r19, 0xC2	; 194
 25a:	00 24       	eor	r0, r0
 25c:	4a 4a       	sbci	r20, 0xAA	; 170
 25e:	52 24       	eor	r5, r2
 260:	00 02       	muls	r16, r16
 262:	02 7e       	andi	r16, 0xE2	; 226
 264:	02 02       	muls	r16, r18
 266:	00 3e       	cpi	r16, 0xE0	; 224
 268:	40 40       	sbci	r20, 0x00	; 0
 26a:	40 3e       	cpi	r20, 0xE0	; 224
 26c:	00 1e       	adc	r0, r16
 26e:	20 40       	sbci	r18, 0x00	; 0
 270:	20 1e       	adc	r2, r16
 272:	00 3e       	cpi	r16, 0xE0	; 224
 274:	40 3c       	cpi	r20, 0xC0	; 192
 276:	40 3e       	cpi	r20, 0xE0	; 224
 278:	00 42       	sbci	r16, 0x20	; 32
 27a:	24 18       	sub	r2, r4
 27c:	24 42       	sbci	r18, 0x24	; 36
 27e:	00 02       	muls	r16, r16
 280:	4c 70       	andi	r20, 0x0C	; 12
 282:	4c 02       	muls	r20, r28
 284:	00 66       	ori	r16, 0x60	; 96
 286:	52 4a       	sbci	r21, 0xA2	; 162
 288:	46 62       	ori	r20, 0x26	; 38
 28a:	00 00       	nop
 28c:	00 7e       	andi	r16, 0xE0	; 224
 28e:	42 00       	.word	0x0042	; ????
 290:	00 00       	nop
 292:	06 18       	sub	r0, r6
 294:	60 00       	.word	0x0060	; ????
 296:	00 00       	nop
 298:	00 42       	sbci	r16, 0x20	; 32
 29a:	7e 00       	.word	0x007e	; ????
 29c:	00 00       	nop
 29e:	04 02       	muls	r16, r20
 2a0:	04 00       	.word	0x0004	; ????
 2a2:	00 40       	sbci	r16, 0x00	; 0
 2a4:	40 40       	sbci	r20, 0x00	; 0
 2a6:	40 40       	sbci	r20, 0x00	; 0
 2a8:	00 00       	nop
 2aa:	02 04       	cpc	r0, r2
 2ac:	00 00       	nop
 2ae:	00 20       	and	r0, r0
 2b0:	54 54       	subi	r21, 0x44	; 68
 2b2:	54 38       	cpi	r21, 0x84	; 132
 2b4:	00 7e       	andi	r16, 0xE0	; 224
 2b6:	44 44       	sbci	r20, 0x44	; 68
 2b8:	44 38       	cpi	r20, 0x84	; 132
 2ba:	00 38       	cpi	r16, 0x80	; 128
 2bc:	44 44       	sbci	r20, 0x44	; 68
 2be:	44 28       	or	r4, r4
 2c0:	00 38       	cpi	r16, 0x80	; 128
 2c2:	44 44       	sbci	r20, 0x44	; 68
 2c4:	44 7e       	andi	r20, 0xE4	; 228
 2c6:	00 38       	cpi	r16, 0x80	; 128
 2c8:	54 54       	subi	r21, 0x44	; 68
 2ca:	54 18       	sub	r5, r4
 2cc:	00 08       	sbc	r0, r0
 2ce:	7c 0a       	sbc	r7, r28
 2d0:	0a 00       	.word	0x000a	; ????
 2d2:	00 98       	cbi	0x00, 0	; 0
 2d4:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2d6:	94 7c       	andi	r25, 0xC4	; 196
 2d8:	00 7e       	andi	r16, 0xE0	; 224
 2da:	08 08       	sbc	r0, r8
 2dc:	08 70       	andi	r16, 0x08	; 8
 2de:	00 00       	nop
 2e0:	48 7a       	andi	r20, 0xA8	; 168
 2e2:	40 00       	.word	0x0040	; ????
 2e4:	00 40       	sbci	r16, 0x00	; 0
 2e6:	80 88       	ldd	r8, Z+16	; 0x10
 2e8:	7a 00       	.word	0x007a	; ????
 2ea:	00 7e       	andi	r16, 0xE0	; 224
 2ec:	10 68       	ori	r17, 0x80	; 128
 2ee:	44 00       	.word	0x0044	; ????
 2f0:	00 00       	nop
 2f2:	42 7e       	andi	r20, 0xE2	; 226
 2f4:	40 00       	.word	0x0040	; ????
 2f6:	00 78       	andi	r16, 0x80	; 128
 2f8:	04 78       	andi	r16, 0x84	; 132
 2fa:	04 78       	andi	r16, 0x84	; 132
 2fc:	00 78       	andi	r16, 0x80	; 128
 2fe:	04 04       	cpc	r0, r4
 300:	7c 00       	.word	0x007c	; ????
 302:	00 38       	cpi	r16, 0x80	; 128
 304:	44 44       	sbci	r20, 0x44	; 68
 306:	44 38       	cpi	r20, 0x84	; 132
 308:	00 fc       	sbrc	r0, 0
 30a:	24 44       	sbci	r18, 0x44	; 68
 30c:	44 38       	cpi	r20, 0x84	; 132
 30e:	00 38       	cpi	r16, 0x80	; 128
 310:	44 44       	sbci	r20, 0x44	; 68
 312:	24 fc       	sbrc	r2, 4
 314:	00 00       	nop
 316:	78 04       	cpc	r7, r8
 318:	04 08       	sbc	r0, r4
 31a:	00 48       	sbci	r16, 0x80	; 128
 31c:	54 54       	subi	r21, 0x44	; 68
 31e:	54 20       	and	r5, r4
 320:	00 04       	cpc	r0, r0
 322:	3e 44       	sbci	r19, 0x4E	; 78
 324:	24 00       	.word	0x0024	; ????
 326:	00 3c       	cpi	r16, 0xC0	; 192
 328:	40 40       	sbci	r20, 0x00	; 0
 32a:	20 7c       	andi	r18, 0xC0	; 192
 32c:	00 1c       	adc	r0, r0
 32e:	20 40       	sbci	r18, 0x00	; 0
 330:	20 1c       	adc	r2, r0
 332:	00 3c       	cpi	r16, 0xC0	; 192
 334:	40 30       	cpi	r20, 0x00	; 0
 336:	40 3c       	cpi	r20, 0xC0	; 192
 338:	00 44       	sbci	r16, 0x40	; 64
 33a:	28 10       	cpse	r2, r8
 33c:	28 44       	sbci	r18, 0x48	; 72
 33e:	00 8c       	ldd	r0, Z+24	; 0x18
 340:	90 60       	ori	r25, 0x00	; 0
 342:	10 0c       	add	r1, r0
 344:	00 44       	sbci	r16, 0x40	; 64
 346:	64 54       	subi	r22, 0x44	; 68
 348:	4c 44       	sbci	r20, 0x4C	; 76
 34a:	00 00       	nop
 34c:	08 36       	cpi	r16, 0x68	; 104
 34e:	41 00       	.word	0x0041	; ????
 350:	00 00       	nop
 352:	00 fe       	sbrs	r0, 0
 354:	00 00       	nop
 356:	00 00       	nop
 358:	41 36       	cpi	r20, 0x61	; 97
 35a:	08 00       	.word	0x0008	; ????
 35c:	00 08       	sbc	r0, r0
 35e:	08 2a       	or	r0, r24
 360:	1c 08       	sbc	r1, r12
 362:	00 3c       	cpi	r16, 0xC0	; 192
 364:	26 23       	and	r18, r22
 366:	26 3c       	cpi	r18, 0xC6	; 198

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d8 e0       	ldi	r29, 0x08	; 8
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e8 ea       	ldi	r30, 0xA8	; 168
 37c:	f7 e0       	ldi	r31, 0x07	; 7
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	ae 30       	cpi	r26, 0x0E	; 14
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	25 e0       	ldi	r18, 0x05	; 5
 38c:	ae e0       	ldi	r26, 0x0E	; 14
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	ae 30       	cpi	r26, 0x0E	; 14
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
 39e:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <lcdwrite>:

.func lcdwrite

lcdwrite:
; 1-bit interface for ST7920 controller
	set_b0_high
 3a6:	5a 9a       	sbi	0x0b, 2	; 11
	set_b0_output		; enable output mode
 3a8:	52 9a       	sbi	0x0a, 2	; 10
	set_en_low
 3aa:	5d 98       	cbi	0x0b, 5	; 11
	set_en_output		; enable output mode
 3ac:	55 9a       	sbi	0x0a, 5	; 10

	RCALL	toggle_en	; set en high and low
 3ae:	6a d0       	rcall	.+212    	; 0x484 <toggle_en>

        RCALL	four_bits	; output four times 1 
 3b0:	64 d0       	rcall	.+200    	; 0x47a <four_bits>
	set_b0_low		; write mode
 3b2:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3b4:	67 d0       	rcall	.+206    	; 0x484 <toggle_en>

	sbrc    preg_1, 0
 3b6:	80 fd       	sbrc	r24, 0
	set_b0_high		; data mode
 3b8:	5a 9a       	sbi	0x0b, 2	; 11
	sbrs    preg_1, 0
 3ba:	80 ff       	sbrs	r24, 0
	set_b0_low		; instruction mode
 3bc:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3be:	62 d0       	rcall	.+196    	; 0x484 <toggle_en>

	set_b0_low
 3c0:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3c2:	60 d0       	rcall	.+192    	; 0x484 <toggle_en>
				; first 8 bit transfer finished
  ; output highest bit first
        sbrc    preg_2, 7
 3c4:	67 fd       	sbrc	r22, 7
	 set_b0_high		; bit 7 == 1
 3c6:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3c8:	5d d0       	rcall	.+186    	; 0x484 <toggle_en>

	set_b0_low
 3ca:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 6
 3cc:	66 fd       	sbrc	r22, 6
	 set_b0_high		; bit 6 == 1
 3ce:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3d0:	59 d0       	rcall	.+178    	; 0x484 <toggle_en>

	set_b0_low
 3d2:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 5
 3d4:	65 fd       	sbrc	r22, 5
	 set_b0_high		; bit 5 == 1
 3d6:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3d8:	55 d0       	rcall	.+170    	; 0x484 <toggle_en>

	set_b0_low
 3da:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 4
 3dc:	64 fd       	sbrc	r22, 4
	 set_b0_high		; bit 4 == 1
 3de:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3e0:	51 d0       	rcall	.+162    	; 0x484 <toggle_en>

	set_b0_low
 3e2:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	four_bits	; output 4 times 0
 3e4:	4a d0       	rcall	.+148    	; 0x47a <four_bits>
				; the upper 4-bit are followed by 4 x 0
	set_b0_low
 3e6:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 3
 3e8:	63 fd       	sbrc	r22, 3
	 set_b0_high		; bit 3 == 1
 3ea:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3ec:	4b d0       	rcall	.+150    	; 0x484 <toggle_en>

	set_b0_low
 3ee:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 2
 3f0:	62 fd       	sbrc	r22, 2
	 set_b0_high		; bit 2 == 1
 3f2:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3f4:	47 d0       	rcall	.+142    	; 0x484 <toggle_en>

	set_b0_low
 3f6:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 1
 3f8:	61 fd       	sbrc	r22, 1
	 set_b0_high		; bit 1 == 1
 3fa:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 3fc:	43 d0       	rcall	.+134    	; 0x484 <toggle_en>

	set_b0_low
 3fe:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 0
 400:	60 fd       	sbrc	r22, 0
	 set_b0_high		; bit 0 == 1
 402:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 404:	3f d0       	rcall	.+126    	; 0x484 <toggle_en>

	set_b0_low
 406:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	four_bits	; output 4 times 0
 408:	38 d0       	rcall	.+112    	; 0x47a <four_bits>
				; the lower 4-bit are followed by 4 x 0
	RCALL	wait50us
 40a:	59 d0       	rcall	.+178    	; 0x4be <wait50us>
	RCALL	wait30us	; at least 72 us delay
 40c:	5a d0       	rcall	.+180    	; 0x4c2 <wait30us>
	ret		// return _lcd_hw_write
 40e:	08 95       	ret

00000410 <lcdread>:

.func lcdread

lcdread:
; 1-bit interface for ST7920 controller
	set_b0_high
 410:	5a 9a       	sbi	0x0b, 2	; 11
	set_b0_output		; enable output mode
 412:	52 9a       	sbi	0x0a, 2	; 10
	set_en_low
 414:	5d 98       	cbi	0x0b, 5	; 11
	set_en_output		; enable output mode
 416:	55 9a       	sbi	0x0a, 5	; 10

	RCALL	toggle_en	; set en high and low
 418:	35 d0       	rcall	.+106    	; 0x484 <toggle_en>

    RCALL	four_bits	; output four times 1 
 41a:	2f d0       	rcall	.+94     	; 0x47a <four_bits>
	set_b0_high		; write mode
 41c:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 41e:	32 d0       	rcall	.+100    	; 0x484 <toggle_en>

	sbrc    preg_1, 0
 420:	80 fd       	sbrc	r24, 0
	set_b0_high		; data mode
 422:	5a 9a       	sbi	0x0b, 2	; 11
	sbrs    preg_1, 0
 424:	80 ff       	sbrs	r24, 0
	set_b0_low		; instruction mode
 426:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 428:	2d d0       	rcall	.+90     	; 0x484 <toggle_en>

	set_b0_low
 42a:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 42c:	2b d0       	rcall	.+86     	; 0x484 <toggle_en>
				; first 8 bit transfer finished
  ; output highest bit first
        sbrc    preg_2, 7
 42e:	67 fd       	sbrc	r22, 7
	 set_b0_high		; bit 7 == 1
 430:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 432:	28 d0       	rcall	.+80     	; 0x484 <toggle_en>

	set_b0_low
 434:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 6
 436:	66 fd       	sbrc	r22, 6
	 set_b0_high		; bit 6 == 1
 438:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 43a:	24 d0       	rcall	.+72     	; 0x484 <toggle_en>

	set_b0_low
 43c:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 5
 43e:	65 fd       	sbrc	r22, 5
	 set_b0_high		; bit 5 == 1
 440:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 442:	20 d0       	rcall	.+64     	; 0x484 <toggle_en>

	set_b0_low
 444:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 4
 446:	64 fd       	sbrc	r22, 4
	 set_b0_high		; bit 4 == 1
 448:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 44a:	1c d0       	rcall	.+56     	; 0x484 <toggle_en>

	set_b0_low
 44c:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	four_bits	; output 4 times 0
 44e:	15 d0       	rcall	.+42     	; 0x47a <four_bits>
				; the upper 4-bit are followed by 4 x 0
	set_b0_low
 450:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 3
 452:	63 fd       	sbrc	r22, 3
	 set_b0_high		; bit 3 == 1
 454:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 456:	16 d0       	rcall	.+44     	; 0x484 <toggle_en>

	set_b0_low
 458:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 2
 45a:	62 fd       	sbrc	r22, 2
	 set_b0_high		; bit 2 == 1
 45c:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 45e:	12 d0       	rcall	.+36     	; 0x484 <toggle_en>

	set_b0_low
 460:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 1
 462:	61 fd       	sbrc	r22, 1
	 set_b0_high		; bit 1 == 1
 464:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 466:	0e d0       	rcall	.+28     	; 0x484 <toggle_en>

	set_b0_low
 468:	5a 98       	cbi	0x0b, 2	; 11
        sbrc    preg_2, 0
 46a:	60 fd       	sbrc	r22, 0
	 set_b0_high		; bit 0 == 1
 46c:	5a 9a       	sbi	0x0b, 2	; 11
	RCALL	toggle_en	; set en high and low
 46e:	0a d0       	rcall	.+20     	; 0x484 <toggle_en>

	set_b0_low
 470:	5a 98       	cbi	0x0b, 2	; 11
	RCALL	four_bits	; output 4 times 0
 472:	03 d0       	rcall	.+6      	; 0x47a <four_bits>
				; the lower 4-bit are followed by 4 x 0
	RCALL	wait50us
 474:	24 d0       	rcall	.+72     	; 0x4be <wait50us>
	RCALL	wait30us	; at least 72 us delay
 476:	25 d0       	rcall	.+74     	; 0x4c2 <wait30us>
	ret		// return _lcd_hw_write
 478:	08 95       	ret

0000047a <four_bits>:
	.endfunc


/* output 4 times the same bit */
four_bits:
	RCALL toggle_en
 47a:	04 d0       	rcall	.+8      	; 0x484 <toggle_en>
	RCALL toggle_en
 47c:	03 d0       	rcall	.+6      	; 0x484 <toggle_en>
	RCALL toggle_en
 47e:	02 d0       	rcall	.+4      	; 0x484 <toggle_en>
	RCALL toggle_en
 480:	01 d0       	rcall	.+2      	; 0x484 <toggle_en>
	ret
 482:	08 95       	ret

00000484 <toggle_en>:

toggle_en:
	set_en_high              ;force data read from LCD controller
 484:	5d 9a       	sbi	0x0b, 5	; 11
        set_en_high		; hold en high to meet the specification (300ns)
 486:	5d 9a       	sbi	0x0b, 5	; 11
	set_en_low		; set SCLK back to low
 488:	5d 98       	cbi	0x0b, 5	; 11
	ret
 48a:	08 95       	ret

0000048c <wait5s>:

wait5s:
 rcall wait1s		;	12+x return-adresses
 48c:	03 d0       	rcall	.+6      	; 0x494 <wait1s>

0000048e <wait4s>:
wait4s:
 rcall wait1s		;	12+x return-adresses
 48e:	02 d0       	rcall	.+4      	; 0x494 <wait1s>

00000490 <wait3s>:
wait3s:
 rcall wait1s		;	12+x return-adresses
 490:	01 d0       	rcall	.+2      	; 0x494 <wait1s>

00000492 <wait2s>:
wait2s:
 rcall wait1s		;1s     12+x Return-Adresses
 492:	00 d0       	rcall	.+0      	; 0x494 <wait1s>

00000494 <wait1s>:
wait1s:
wait1000ms:	
 rcall wait500ms	;500ms	11+x Return-Adresses
 494:	00 d0       	rcall	.+0      	; 0x496 <wait500ms>

00000496 <wait500ms>:
wait500ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
 496:	03 d0       	rcall	.+6      	; 0x49e <wait100ms>

00000498 <wait400ms>:
wait400ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
 498:	02 d0       	rcall	.+4      	; 0x49e <wait100ms>

0000049a <wait300ms>:
wait300ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
 49a:	01 d0       	rcall	.+2      	; 0x49e <wait100ms>

0000049c <wait200ms>:
wait200ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
 49c:	00 d0       	rcall	.+0      	; 0x49e <wait100ms>

0000049e <wait100ms>:
wait100ms:
 rcall wait50ms	    	; 50ms	9+x Return-Adresses
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <wait50ms>

000004a0 <wait50ms>:
wait50ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses 
 4a0:	03 d0       	rcall	.+6      	; 0x4a8 <wait10ms>

000004a2 <wait40ms>:
wait40ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
 4a2:	02 d0       	rcall	.+4      	; 0x4a8 <wait10ms>

000004a4 <wait30ms>:
wait30ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
 4a4:	01 d0       	rcall	.+2      	; 0x4a8 <wait10ms>

000004a6 <wait20ms>:
wait20ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <wait10ms>

000004a8 <wait10ms>:
wait10ms:
 rcall wait5ms	   	;5ms	7+x Return-Adresses
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <wait5ms>

000004aa <wait5ms>:
wait5ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
 4aa:	03 d0       	rcall	.+6      	; 0x4b2 <wait1ms>

000004ac <wait4ms>:
wait4ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
 4ac:	02 d0       	rcall	.+4      	; 0x4b2 <wait1ms>

000004ae <wait3ms>:
wait3ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
 4ae:	01 d0       	rcall	.+2      	; 0x4b2 <wait1ms>

000004b0 <wait2ms>:
wait2ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
 4b0:	00 d0       	rcall	.+0      	; 0x4b2 <wait1ms>

000004b2 <wait1ms>:
wait1ms:
 rcall wait500us    	;500us	5+x Return-Adresses
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <wait500us>

000004b4 <wait500us>:
wait500us:
 rcall wait100us    	;100us	4+x Return-Adresses
 4b4:	03 d0       	rcall	.+6      	; 0x4bc <wait100us>

000004b6 <wait400us>:
wait400us:
 rcall wait100us    	;100us	4+x Return-Adresses
 4b6:	02 d0       	rcall	.+4      	; 0x4bc <wait100us>

000004b8 <wait300us>:
wait300us:
 rcall wait100us    	;100us	4+x Return-Adresses
 4b8:	01 d0       	rcall	.+2      	; 0x4bc <wait100us>

000004ba <wait200us>:
wait200us:
 rcall wait100us    	;100us	4+x Return-Adresses
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <wait100us>

000004bc <wait100us>:
wait100us:
 rcall wait50us	
 4bc:	00 d0       	rcall	.+0      	; 0x4be <wait50us>

000004be <wait50us>:
wait50us:
 rcall wait10us     	;10us delay
 4be:	03 d0       	rcall	.+6      	; 0x4c6 <wait10us>

000004c0 <wait40us>:
wait40us:
 rcall wait10us     	;10us delay
 4c0:	02 d0       	rcall	.+4      	; 0x4c6 <wait10us>

000004c2 <wait30us>:
wait30us:
 rcall wait10us     	;10us delay
 4c2:	01 d0       	rcall	.+2      	; 0x4c6 <wait10us>

000004c4 <wait20us>:
wait20us:
 rcall wait10us		;10us delay
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <wait10us>

000004c6 <wait10us>:
wait10us:		;
 rcall wait5us
 4c6:	00 d0       	rcall	.+0      	; 0x4c8 <wait5us>

000004c8 <wait5us>:
  ; a 1us delay is also possible
wait5us:
   rcall wait1us
 4c8:	03 d0       	rcall	.+6      	; 0x4d0 <wait1us>

000004ca <wait4us>:
wait4us:
   rcall wait1us
 4ca:	02 d0       	rcall	.+4      	; 0x4d0 <wait1us>

000004cc <wait3us>:
wait3us:
   rcall wait1us
 4cc:	01 d0       	rcall	.+2      	; 0x4d0 <wait1us>

000004ce <wait2us>:
wait2us:
   rcall wait1us
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <wait1us>

000004d0 <wait1us>:
wait1us:
    nop			/* one additional tic */
 4d0:	00 00       	nop
 4d2:	08 95       	ret

000004d4 <main>:
#include <avr/io.h>
#include "st7920.h"
#include "st7920g.h"

int main(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	2c 97       	sbiw	r28, 0x0c	; 12
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
    wait100ms();
 4e8:	0e 94 4f 02 	call	0x49e	; 0x49e <wait100ms>
	lcdwrite(0,CMD_SET_FUNCTION | MODE_8_BIT);
 4ec:	60 e3       	ldi	r22, 0x30	; 48
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait200us();
 4f4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <wait200us>
	lcdwrite(0,CMD_SET_FUNCTION | MODE_8_BIT);
 4f8:	60 e3       	ldi	r22, 0x30	; 48
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait50us();
 500:	0e 94 5f 02 	call	0x4be	; 0x4be <wait50us>
	lcdwrite(0,CMD_DISPLAY_ON);
 504:	6c e0       	ldi	r22, 0x0C	; 12
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait200us();
 50c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <wait200us>
	lcdwrite(0,CMD_CLEAR);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait20ms();
 518:	0e 94 53 02 	call	0x4a6	; 0x4a6 <wait20ms>
	lcdwrite(0,CMD_SET_ENTRY_MODE);
 51c:	64 e0       	ldi	r22, 0x04	; 4
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait1ms();
 524:	0e 94 59 02 	call	0x4b2	; 0x4b2 <wait1ms>
	lcdwrite(0,CMD_SET_FUNCTION | MODE_8_BIT | MODE_EXTENDED);
 528:	64 e3       	ldi	r22, 0x34	; 52
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait100us();
 530:	0e 94 5e 02 	call	0x4bc	; 0x4bc <wait100us>
	lcdwrite(0,CMD_SET_FUNCTION | MODE_8_BIT | MODE_EXTENDED | GRAPHIC_DISPLAY_ON);
 534:	66 e3       	ldi	r22, 0x36	; 54
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
	wait50ms();
 53c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <wait50ms>
	lcd_test(0);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_test>
	lcd_refresh();
 546:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_refresh>
	wait5s();
 54a:	0e 94 46 02 	call	0x48c	; 0x48c <wait5s>
	lcd_clear();
 54e:	0e 94 cb 02 	call	0x596	; 0x596 <lcd_clear>
	lcd_refresh();
 552:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_refresh>
	wait100ms();
 556:	0e 94 4f 02 	call	0x49e	; 0x49e <wait100ms>
	uint8_t str[] = "ST7920 test";
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	e2 e0       	ldi	r30, 0x02	; 2
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	de 01       	movw	r26, r28
 562:	11 96       	adiw	r26, 0x01	; 1
 564:	01 90       	ld	r0, Z+
 566:	0d 92       	st	X+, r0
 568:	8a 95       	dec	r24
 56a:	e1 f7       	brne	.-8      	; 0x564 <main+0x90>
	for(uint8_t i = 0; str[i]; i++) lcd_data(str[i]);
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	88 23       	and	r24, r24
 570:	69 f0       	breq	.+26     	; 0x58c <main+0xb8>
 572:	10 e0       	ldi	r17, 0x00	; 0
 574:	0e 94 85 03 	call	0x70a	; 0x70a <lcd_data>
 578:	1f 5f       	subi	r17, 0xFF	; 255
 57a:	e1 e0       	ldi	r30, 0x01	; 1
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	e1 0f       	add	r30, r17
 584:	f1 1d       	adc	r31, r1
 586:	80 81       	ld	r24, Z
 588:	81 11       	cpse	r24, r1
 58a:	f4 cf       	rjmp	.-24     	; 0x574 <main+0xa0>
	wait50ms();
 58c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <wait50ms>
	lcd_refresh();
 590:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_refresh>
 594:	ff cf       	rjmp	.-2      	; 0x594 <main+0xc0>

00000596 <lcd_clear>:
			}
		} /* end for jj */
	} /* end for ii */
}

void mylcd_set_pixels(const uint8_t *pdata, uint8_t x, uint8_t y) {
 596:	ee e0       	ldi	r30, 0x0E	; 14
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	2e e0       	ldi	r18, 0x0E	; 14
 59c:	35 e0       	ldi	r19, 0x05	; 5
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <lcd_clear+0x1a>
 5a0:	11 92       	st	Z+, r1
 5a2:	e8 17       	cp	r30, r24
 5a4:	f9 07       	cpc	r31, r25
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <lcd_clear+0xa>
 5a8:	fc 01       	movw	r30, r24
 5aa:	28 17       	cp	r18, r24
 5ac:	39 07       	cpc	r19, r25
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <lcd_clear+0x20>
 5b0:	cf 01       	movw	r24, r30
 5b2:	40 96       	adiw	r24, 0x10	; 16
 5b4:	f5 cf       	rjmp	.-22     	; 0x5a0 <lcd_clear+0xa>
 5b6:	08 95       	ret

000005b8 <lcd_test>:
 5b8:	4e e0       	ldi	r20, 0x0E	; 14
 5ba:	51 e0       	ldi	r21, 0x01	; 1
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <lcd_test+0x20>
 5c0:	81 11       	cpse	r24, r1
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <lcd_test+0xe>
 5c4:	90 83       	st	Z, r25
 5c6:	9f 5f       	subi	r25, 0xFF	; 255
 5c8:	31 96       	adiw	r30, 0x01	; 1
 5ca:	92 13       	cpse	r25, r18
 5cc:	f9 cf       	rjmp	.-14     	; 0x5c0 <lcd_test+0x8>
 5ce:	3f 5f       	subi	r19, 0xFF	; 255
 5d0:	40 5f       	subi	r20, 0xF0	; 240
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	30 34       	cpi	r19, 0x40	; 64
 5d6:	41 f0       	breq	.+16     	; 0x5e8 <lcd_test+0x30>
 5d8:	23 2f       	mov	r18, r19
 5da:	26 95       	lsr	r18
 5dc:	26 95       	lsr	r18
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	92 0f       	add	r25, r18
 5e2:	2f 5e       	subi	r18, 0xEF	; 239
 5e4:	fa 01       	movw	r30, r20
 5e6:	ec cf       	rjmp	.-40     	; 0x5c0 <lcd_test+0x8>
 5e8:	08 95       	ret

000005ea <lcd_set_pixels>:
 5ea:	4f 92       	push	r4
 5ec:	5f 92       	push	r5
 5ee:	6f 92       	push	r6
 5f0:	7f 92       	push	r7
 5f2:	8f 92       	push	r8
 5f4:	9f 92       	push	r9
 5f6:	af 92       	push	r10
 5f8:	bf 92       	push	r11
 5fa:	cf 92       	push	r12
 5fc:	df 92       	push	r13
 5fe:	ef 92       	push	r14
 600:	ff 92       	push	r15
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	4c 01       	movw	r8, r24
 60c:	b6 2e       	mov	r11, r22
 60e:	86 2f       	mov	r24, r22
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	06 96       	adiw	r24, 0x06	; 6
 614:	81 38       	cpi	r24, 0x81	; 129
 616:	91 05       	cpc	r25, r1
 618:	0c f0       	brlt	.+2      	; 0x61c <lcd_set_pixels+0x32>
 61a:	66 c0       	rjmp	.+204    	; 0x6e8 <lcd_set_pixels+0xfe>
 61c:	84 2f       	mov	r24, r20
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	08 96       	adiw	r24, 0x08	; 8
 622:	81 34       	cpi	r24, 0x41	; 65
 624:	91 05       	cpc	r25, r1
 626:	0c f0       	brlt	.+2      	; 0x62a <lcd_set_pixels+0x40>
 628:	5f c0       	rjmp	.+190    	; 0x6e8 <lcd_set_pixels+0xfe>
 62a:	a4 2e       	mov	r10, r20
 62c:	e1 2c       	mov	r14, r1
 62e:	f1 2c       	mov	r15, r1
 630:	a1 e0       	ldi	r26, 0x01	; 1
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	56 e0       	ldi	r21, 0x06	; 6
 636:	56 0f       	add	r21, r22
 638:	c6 2f       	mov	r28, r22
 63a:	d0 e0       	ldi	r29, 0x00	; 0
 63c:	2e 01       	movw	r4, r28
 63e:	48 18       	sub	r4, r8
 640:	59 08       	sbc	r5, r9
 642:	07 e0       	ldi	r16, 0x07	; 7
 644:	10 e0       	ldi	r17, 0x00	; 0
 646:	9a 2f       	mov	r25, r26
 648:	0e 2c       	mov	r0, r14
 64a:	01 c0       	rjmp	.+2      	; 0x64e <lcd_set_pixels+0x64>
 64c:	99 0f       	add	r25, r25
 64e:	0a 94       	dec	r0
 650:	ea f7       	brpl	.-6      	; 0x64c <lcd_set_pixels+0x62>
 652:	f4 01       	movw	r30, r8
 654:	8b 2d       	mov	r24, r11
 656:	20 e1       	ldi	r18, 0x10	; 16
 658:	a2 9e       	mul	r10, r18
 65a:	b0 01       	movw	r22, r0
 65c:	11 24       	eor	r1, r1
 65e:	62 5f       	subi	r22, 0xF2	; 242
 660:	7e 4f       	sbci	r23, 0xFE	; 254
 662:	92 01       	movw	r18, r4
 664:	2e 0f       	add	r18, r30
 666:	3f 1f       	adc	r19, r31
 668:	33 23       	and	r19, r19
 66a:	14 f4       	brge	.+4      	; 0x670 <lcd_set_pixels+0x86>
 66c:	29 5f       	subi	r18, 0xF9	; 249
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	35 95       	asr	r19
 672:	27 95       	ror	r18
 674:	35 95       	asr	r19
 676:	27 95       	ror	r18
 678:	35 95       	asr	r19
 67a:	27 95       	ror	r18
 67c:	48 2f       	mov	r20, r24
 67e:	47 70       	andi	r20, 0x07	; 7
 680:	d4 90       	lpm	r13, Z
 682:	d9 22       	and	r13, r25
 684:	99 f4       	brne	.+38     	; 0x6ac <lcd_set_pixels+0xc2>
 686:	6b 01       	movw	r12, r22
 688:	c2 0e       	add	r12, r18
 68a:	d1 1c       	adc	r13, r1
 68c:	98 01       	movw	r18, r16
 68e:	24 1b       	sub	r18, r20
 690:	31 09       	sbc	r19, r1
 692:	ed 01       	movw	r28, r26
 694:	02 c0       	rjmp	.+4      	; 0x69a <lcd_set_pixels+0xb0>
 696:	cc 0f       	add	r28, r28
 698:	dd 1f       	adc	r29, r29
 69a:	2a 95       	dec	r18
 69c:	e2 f7       	brpl	.-8      	; 0x696 <lcd_set_pixels+0xac>
 69e:	9e 01       	movw	r18, r28
 6a0:	20 95       	com	r18
 6a2:	e6 01       	movw	r28, r12
 6a4:	38 81       	ld	r19, Y
 6a6:	23 23       	and	r18, r19
 6a8:	28 83       	st	Y, r18
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <lcd_set_pixels+0xe4>
 6ac:	6b 01       	movw	r12, r22
 6ae:	c2 0e       	add	r12, r18
 6b0:	d1 1c       	adc	r13, r1
 6b2:	98 01       	movw	r18, r16
 6b4:	24 1b       	sub	r18, r20
 6b6:	31 09       	sbc	r19, r1
 6b8:	3d 01       	movw	r6, r26
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <lcd_set_pixels+0xd6>
 6bc:	66 0c       	add	r6, r6
 6be:	77 1c       	adc	r7, r7
 6c0:	2a 95       	dec	r18
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <lcd_set_pixels+0xd2>
 6c4:	93 01       	movw	r18, r6
 6c6:	e6 01       	movw	r28, r12
 6c8:	38 81       	ld	r19, Y
 6ca:	23 2b       	or	r18, r19
 6cc:	28 83       	st	Y, r18
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	31 96       	adiw	r30, 0x01	; 1
 6d2:	85 13       	cpse	r24, r21
 6d4:	c6 cf       	rjmp	.-116    	; 0x662 <lcd_set_pixels+0x78>
 6d6:	df ef       	ldi	r29, 0xFF	; 255
 6d8:	ed 1a       	sub	r14, r29
 6da:	fd 0a       	sbc	r15, r29
 6dc:	a3 94       	inc	r10
 6de:	28 e0       	ldi	r18, 0x08	; 8
 6e0:	e2 16       	cp	r14, r18
 6e2:	f1 04       	cpc	r15, r1
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <lcd_set_pixels+0xfe>
 6e6:	af cf       	rjmp	.-162    	; 0x646 <lcd_set_pixels+0x5c>
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	bf 90       	pop	r11
 6fa:	af 90       	pop	r10
 6fc:	9f 90       	pop	r9
 6fe:	8f 90       	pop	r8
 700:	7f 90       	pop	r7
 702:	6f 90       	pop	r6
 704:	5f 90       	pop	r5
 706:	4f 90       	pop	r4
 708:	08 95       	ret

0000070a <lcd_data>:
void lcd_data(uint8_t temp1) {
	/* -------------------------------------------------------------------------- */
	uint8_t *pfont;
	pfont = (uint8_t *)font + (6 * temp1);	// first byte of character data
	// for other controllers like ST7565 the _page specifies the page of the controller (8 lines)
	lcd_set_pixels( pfont, _xpos, _vpos);
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	9c 01       	movw	r18, r24
 70e:	22 0f       	add	r18, r18
 710:	33 1f       	adc	r19, r19
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 71e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <_xpos>
 722:	88 59       	subi	r24, 0x98	; 152
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	0e 94 f5 02 	call	0x5ea	; 0x5ea <lcd_set_pixels>
	_xpos += 6;		// move pointer to the next character position
 72a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_xpos>
 72e:	8a 5f       	subi	r24, 0xFA	; 250
 730:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_xpos>
 734:	08 95       	ret

00000736 <lcd_refresh>:
} /* end lcd_data() */

void lcd_refresh(void) {
 736:	ff 92       	push	r15
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	ce e0       	ldi	r28, 0x0E	; 14
 742:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t xx;
	uint8_t yy;
	for (yy=0; yy<64; yy++) {
 744:	f1 2c       	mov	r15, r1
		if (yy < 32) {
 746:	8f e1       	ldi	r24, 0x1F	; 31
 748:	8f 15       	cp	r24, r15
 74a:	50 f0       	brcs	.+20     	; 0x760 <lcd_refresh+0x2a>
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|yy);	/* set vertical start address */
 74c:	6f 2d       	mov	r22, r15
 74e:	60 68       	ori	r22, 0x80	; 128
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|0);	/* horizontal address starts with 0 */
 756:	60 e8       	ldi	r22, 0x80	; 128
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
 75e:	18 c0       	rjmp	.+48     	; 0x790 <lcd_refresh+0x5a>
		} else {
			// the second half of display is located at GDRAM address 128..255 ((8..15) x 16 pixel)
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|(yy-32));	/* set vertical start address */
 760:	60 ee       	ldi	r22, 0xE0	; 224
 762:	6f 0d       	add	r22, r15
 764:	60 68       	ori	r22, 0x80	; 128
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|8);	/* horizontal address starts with 0 (128)*/
 76c:	68 e8       	ldi	r22, 0x88	; 136
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
 774:	0d c0       	rjmp	.+26     	; 0x790 <lcd_refresh+0x5a>
		}
		for (xx=0; xx<(128 / 8); xx++) {
			lcdwrite(1, lcd_bit_mem[yy][xx]);	// write 16 x 8 bits to GDRAM (= 128 pixel)
 776:	69 91       	ld	r22, Y+
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcdwrite>
		} else {
			// the second half of display is located at GDRAM address 128..255 ((8..15) x 16 pixel)
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|(yy-32));	/* set vertical start address */
			lcdwrite(0, CMD_SET_GDRAM_ADDRESS|8);	/* horizontal address starts with 0 (128)*/
		}
		for (xx=0; xx<(128 / 8); xx++) {
 77e:	c0 17       	cp	r28, r16
 780:	d1 07       	cpc	r29, r17
 782:	c9 f7       	brne	.-14     	; 0x776 <lcd_refresh+0x40>
} /* end lcd_data() */

void lcd_refresh(void) {
	uint8_t xx;
	uint8_t yy;
	for (yy=0; yy<64; yy++) {
 784:	f3 94       	inc	r15
 786:	e8 01       	movw	r28, r16
 788:	80 e4       	ldi	r24, 0x40	; 64
 78a:	f8 12       	cpse	r15, r24
 78c:	dc cf       	rjmp	.-72     	; 0x746 <lcd_refresh+0x10>
 78e:	04 c0       	rjmp	.+8      	; 0x798 <lcd_refresh+0x62>
 790:	8e 01       	movw	r16, r28
 792:	00 5f       	subi	r16, 0xF0	; 240
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	ef cf       	rjmp	.-34     	; 0x776 <lcd_refresh+0x40>
		}
		for (xx=0; xx<(128 / 8); xx++) {
			lcdwrite(1, lcd_bit_mem[yy][xx]);	// write 16 x 8 bits to GDRAM (= 128 pixel)
		}
	} /* end for yy */
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	ff 90       	pop	r15
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
