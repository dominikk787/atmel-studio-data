
bootloader0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   00000122  000006de  000006de  000000ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000003a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000804  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005eb  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021d  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .bootloader:

000006de <startboot>:
    {
    }
}

void startboot() {
	asm("rjmp boot");
 6de:	12 c0       	rjmp	.+36     	; 0x704 <bootloader>
 6e0:	08 95       	ret

000006e2 <putch>:
		putch(':');
	}
}

void putch(char ch) {
    while (!(UCSRA & _BV(UDRE))) ;
 6e2:	5d 9b       	sbis	0x0b, 5	; 11
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <putch>
	UDR = ch;
 6e6:	8c b9       	out	0x0c, r24	; 12
 6e8:	08 95       	ret

000006ea <getch>:
}

uint8_t getch(void) {
  while(!(UCSRA & _BV(RXC)))  ;
 6ea:	5f 9b       	sbis	0x0b, 7	; 11
 6ec:	fe cf       	rjmp	.-4      	; 0x6ea <getch>
  return UDR;
 6ee:	8c b1       	in	r24, 0x0c	; 12
}
 6f0:	08 95       	ret

000006f2 <verifySpace>:

void verifySpace() {
  if (getch() != ' ') {
 6f2:	fb df       	rcall	.-10     	; 0x6ea <getch>
 6f4:	80 32       	cpi	r24, 0x20	; 32
 6f6:	19 f0       	breq	.+6      	; 0x6fe <verifySpace+0xc>
    WDTCSR = _BV(WDE);
 6f8:	88 e0       	ldi	r24, 0x08	; 8
 6fa:	81 bd       	out	0x21, r24	; 33
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <verifySpace+0xa>
	while(1) ;
  }
  putch(';');
 6fe:	8b e3       	ldi	r24, 0x3B	; 59
 700:	f0 df       	rcall	.-32     	; 0x6e2 <putch>
 702:	08 95       	ret

00000704 <bootloader>:
	asm("rjmp boot");
}

void bootloader(void) {
	asm("boot:");
	asm volatile ("cli");
 704:	f8 94       	cli
	asm volatile ("clr __zero_reg__\n");
 706:	11 24       	eor	r1, r1
	UCSRB |= _BV(RXEN) | _BV(TXEN);
 708:	8a b1       	in	r24, 0x0a	; 10
 70a:	88 61       	ori	r24, 0x18	; 24
 70c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= _BV(UCSZ1) | _BV(UCSZ0);
 70e:	83 b1       	in	r24, 0x03	; 3
 710:	86 60       	ori	r24, 0x06	; 6
 712:	83 b9       	out	0x03, r24	; 3
	UBRRL = 12;
 714:	8c e0       	ldi	r24, 0x0C	; 12
 716:	89 b9       	out	0x09, r24	; 9
	register addr16_t address;
	register pagelen_t  length;
	addr16_t buff = {(uint8_t *)(RAMSTART)};
  	putch('b');
 718:	82 e6       	ldi	r24, 0x62	; 98
 71a:	e3 df       	rcall	.-58     	; 0x6e2 <putch>
	* Start the page erase and wait for it to finish.  There
	* used to be code to do this while receiving the data over
	* the serial link, but the performance improvement was slight,
	* and we needed the space back.
	*/
	boot_page_erase(address.word);
 71c:	0f 2e       	mov	r0, r31
 71e:	f3 e0       	ldi	r31, 0x03	; 3
 720:	bf 2e       	mov	r11, r31
 722:	f0 2d       	mov	r31, r0

	/*
	* Copy data from the buffer into the flash write buffer.
	*/
	do {
	boot_page_fill((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 724:	dd 24       	eor	r13, r13
 726:	d3 94       	inc	r13
	} while (len -= 2);

	/*
	* Actually Write the buffer to flash (and wait for it to finish.)
	*/
	boot_page_write(address.word);
 728:	0f 2e       	mov	r0, r31
 72a:	f5 e0       	ldi	r31, 0x05	; 5
 72c:	cf 2e       	mov	r12, r31
 72e:	f0 2d       	mov	r31, r0
	register addr16_t address;
	register pagelen_t  length;
	addr16_t buff = {(uint8_t *)(RAMSTART)};
  	putch('b');
	for(;;) {
		char ch = getch();
 730:	dc df       	rcall	.-72     	; 0x6ea <getch>
		
		if(ch == 'A') {
 732:	81 34       	cpi	r24, 0x41	; 65
 734:	99 f4       	brne	.+38     	; 0x75c <bootloader+0x58>
			// LOAD ADDRESS
			address.bytes[0] = getch();
 736:	d9 df       	rcall	.-78     	; 0x6ea <getch>
 738:	08 2f       	mov	r16, r24
			address.bytes[1] = 0;
 73a:	10 e0       	ldi	r17, 0x00	; 0
			address.word *= 32; // Convert from word address to byte address
 73c:	00 0f       	add	r16, r16
 73e:	11 1f       	adc	r17, r17
 740:	02 95       	swap	r16
 742:	12 95       	swap	r17
 744:	10 7f       	andi	r17, 0xF0	; 240
 746:	10 27       	eor	r17, r16
 748:	00 7f       	andi	r16, 0xF0	; 240
 74a:	10 27       	eor	r17, r16
			verifySpace();
 74c:	d2 df       	rcall	.-92     	; 0x6f2 <verifySpace>
			putch(2);
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	c8 df       	rcall	.-112    	; 0x6e2 <putch>
			putch(address.bytes[1]);
 752:	81 2f       	mov	r24, r17
 754:	c6 df       	rcall	.-116    	; 0x6e2 <putch>
			putch(address.bytes[0]);
 756:	80 2f       	mov	r24, r16
 758:	c4 df       	rcall	.-120    	; 0x6e2 <putch>
 75a:	4f c0       	rjmp	.+158    	; 0x7fa <bootloader+0xf6>
		}
		/* Write memory, length is big endian and is in bytes */
		else if(ch == 'P') {
 75c:	80 35       	cpi	r24, 0x50	; 80
 75e:	09 f0       	breq	.+2      	; 0x762 <bootloader+0x5e>
 760:	36 c0       	rjmp	.+108    	; 0x7ce <bootloader+0xca>
			// PROGRAM PAGE - we support flash programming only, not EEPROM
			uint8_t *bufPtr;
			pagelen_t savelength;

			length = getch();
 762:	c3 df       	rcall	.-122    	; 0x6ea <getch>
 764:	c8 2f       	mov	r28, r24
 766:	88 24       	eor	r8, r8
 768:	8a 94       	dec	r8
 76a:	88 0e       	add	r8, r24
 76c:	91 2c       	mov	r9, r1
 76e:	81 e6       	ldi	r24, 0x61	; 97
 770:	88 0e       	add	r8, r24
 772:	91 1c       	adc	r9, r1
 774:	0f 2e       	mov	r0, r31
 776:	f0 e6       	ldi	r31, 0x60	; 96
 778:	ef 2e       	mov	r14, r31
 77a:	f1 2c       	mov	r15, r1
 77c:	f0 2d       	mov	r31, r0
			savelength = length;

			// read a page worth of contents
			bufPtr = buff.bptr;
			do *bufPtr++ = getch();
 77e:	b5 df       	rcall	.-150    	; 0x6ea <getch>
 780:	f7 01       	movw	r30, r14
 782:	81 93       	st	Z+, r24
 784:	7f 01       	movw	r14, r30
			while (--length);
 786:	e8 15       	cp	r30, r8
 788:	f9 05       	cpc	r31, r9
 78a:	c9 f7       	brne	.-14     	; 0x77e <bootloader+0x7a>

			// Read command terminator, start reply
			verifySpace();
 78c:	b2 df       	rcall	.-156    	; 0x6f2 <verifySpace>
			putch(0);
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	a8 df       	rcall	.-176    	; 0x6e2 <putch>
 792:	98 01       	movw	r18, r16
	* Start the page erase and wait for it to finish.  There
	* used to be code to do this while receiving the data over
	* the serial link, but the performance improvement was slight,
	* and we needed the space back.
	*/
	boot_page_erase(address.word);
 794:	f8 01       	movw	r30, r16
 796:	b0 92 57 00 	sts	0x0057, r11	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 79a:	e8 95       	spm
	boot_spm_busy_wait();
 79c:	07 b6       	in	r0, 0x37	; 55
 79e:	00 fc       	sbrc	r0, 0
 7a0:	fd cf       	rjmp	.-6      	; 0x79c <bootloader+0x98>
 7a2:	f9 01       	movw	r30, r18
 7a4:	a0 e6       	ldi	r26, 0x60	; 96
 7a6:	b0 e0       	ldi	r27, 0x00	; 0

	/*
	* Copy data from the buffer into the flash write buffer.
	*/
	do {
	boot_page_fill((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 7a8:	8d 91       	ld	r24, X+
 7aa:	9d 91       	ld	r25, X+
 7ac:	0c 01       	movw	r0, r24
 7ae:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 7b2:	e8 95       	spm
 7b4:	11 24       	eor	r1, r1
	addrPtr += 2;
	} while (len -= 2);
 7b6:	c2 50       	subi	r28, 0x02	; 2
 7b8:	32 96       	adiw	r30, 0x02	; 2
 7ba:	c1 11       	cpse	r28, r1
 7bc:	f5 cf       	rjmp	.-22     	; 0x7a8 <bootloader+0xa4>

	/*
	* Actually Write the buffer to flash (and wait for it to finish.)
	*/
	boot_page_write(address.word);
 7be:	f9 01       	movw	r30, r18
 7c0:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 7c4:	e8 95       	spm
	boot_spm_busy_wait();
 7c6:	07 b6       	in	r0, 0x37	; 55
 7c8:	00 fc       	sbrc	r0, 0
 7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <bootloader+0xc2>
 7cc:	16 c0       	rjmp	.+44     	; 0x7fa <bootloader+0xf6>
			writebuffer(buff, address, savelength);


		}
		/* Read memory block mode, length is big endian.  */
		else if(ch == 'R') {
 7ce:	82 35       	cpi	r24, 0x52	; 82
 7d0:	79 f4       	brne	.+30     	; 0x7f0 <bootloader+0xec>
			length = getch();
 7d2:	8b df       	rcall	.-234    	; 0x6ea <getch>
 7d4:	f8 2e       	mov	r15, r24

			verifySpace();
 7d6:	8d df       	rcall	.-230    	; 0x6f2 <verifySpace>
			putch(length);
 7d8:	8f 2d       	mov	r24, r15
 7da:	83 df       	rcall	.-250    	; 0x6e2 <putch>
 7dc:	e8 01       	movw	r28, r16
{
    uint8_t ch;

	do {
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
 7de:	fe 01       	movw	r30, r28
 7e0:	85 91       	lpm	r24, Z+
 7e2:	ef 01       	movw	r28, r30
	    putch(ch);
 7e4:	7e df       	rcall	.-260    	; 0x6e2 <putch>
 7e6:	8f 2d       	mov	r24, r15
	} while (length--);
 7e8:	fa 94       	dec	r15
 7ea:	81 11       	cpse	r24, r1
 7ec:	f8 cf       	rjmp	.-16     	; 0x7de <bootloader+0xda>
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <bootloader+0xf6>
			verifySpace();
			putch(length);

			read_mem(address, length);
		}
		else if (ch == 'Q') { /* 'Q' */
 7f0:	81 35       	cpi	r24, 0x51	; 81
 7f2:	19 f4       	brne	.+6      	; 0x7fa <bootloader+0xf6>
			// Adaboot no-wait mod
			verifySpace();
 7f4:	7e df       	rcall	.-260    	; 0x6f2 <verifySpace>
			putch(0);
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	74 df       	rcall	.-280    	; 0x6e2 <putch>
		}
		putch(':');
 7fa:	8a e3       	ldi	r24, 0x3A	; 58
 7fc:	72 df       	rcall	.-284    	; 0x6e2 <putch>
	}
 7fe:	98 cf       	rjmp	.-208    	; 0x730 <bootloader+0x2c>

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	02 c0       	rjmp	.+4      	; 0x36 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
static __attribute__((always_inline)) void writebuffer(addr16_t mybuff, addr16_t address, pagelen_t len);
static __attribute__((always_inline)) void read_mem(addr16_t address, pagelen_t length);

int main(void)
{
	bootloader();
  34:	67 d3       	rcall	.+1742   	; 0x704 <bootloader>

00000036 <_exit>:
  36:	f8 94       	cli

00000038 <__stop_program>:
  38:	ff cf       	rjmp	.-2      	; 0x38 <__stop_program>
